# Generated from C:/Users/alise/Documents/University/Semesters/Term 8/Compiler/Exams/Midterm/Project/grammars\Q1.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,3,4,43,8,4,1,
        4,3,4,46,8,4,1,4,1,4,3,4,50,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,3,4,63,8,4,1,5,3,5,66,8,5,1,5,3,5,69,8,5,1,5,1,5,3,5,
        73,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,86,8,5,1,
        6,3,6,89,8,6,1,6,3,6,92,8,6,1,6,1,6,3,6,96,8,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,109,8,6,1,7,3,7,112,8,7,1,7,3,7,115,
        8,7,1,7,1,7,3,7,119,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,129,
        8,7,1,8,3,8,132,8,8,1,8,3,8,135,8,8,1,8,1,8,3,8,139,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,152,8,8,1,9,3,9,155,8,9,
        1,9,3,9,158,8,9,1,9,1,9,3,9,162,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,3,9,172,8,9,0,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,1,0,11,1,0,48,57,1,0,49,57,1,0,49,54,1,0,48,55,1,0,48,56,1,0,
        49,51,1,0,48,49,1,0,48,50,1,0,49,50,1,0,48,53,1,0,48,51,212,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,
        0,0,3,25,1,0,0,0,5,29,1,0,0,0,7,35,1,0,0,0,9,62,1,0,0,0,11,85,1,
        0,0,0,13,108,1,0,0,0,15,128,1,0,0,0,17,151,1,0,0,0,19,171,1,0,0,
        0,21,22,5,70,0,0,22,23,5,49,0,0,23,24,5,58,0,0,24,2,1,0,0,0,25,26,
        5,70,0,0,26,27,5,50,0,0,27,28,5,58,0,0,28,4,1,0,0,0,29,30,3,9,4,
        0,30,31,5,44,0,0,31,32,3,11,5,0,32,33,5,44,0,0,33,34,3,13,6,0,34,
        6,1,0,0,0,35,36,3,15,7,0,36,37,5,44,0,0,37,38,3,17,8,0,38,39,5,44,
        0,0,39,40,3,19,9,0,40,8,1,0,0,0,41,43,5,48,0,0,42,41,1,0,0,0,42,
        43,1,0,0,0,43,45,1,0,0,0,44,46,5,48,0,0,45,44,1,0,0,0,45,46,1,0,
        0,0,46,47,1,0,0,0,47,63,7,0,0,0,48,50,5,48,0,0,49,48,1,0,0,0,49,
        50,1,0,0,0,50,51,1,0,0,0,51,52,7,1,0,0,52,63,7,0,0,0,53,54,7,2,0,
        0,54,55,7,0,0,0,55,63,7,0,0,0,56,57,5,55,0,0,57,58,7,3,0,0,58,63,
        7,0,0,0,59,60,5,55,0,0,60,61,5,56,0,0,61,63,7,4,0,0,62,42,1,0,0,
        0,62,49,1,0,0,0,62,53,1,0,0,0,62,56,1,0,0,0,62,59,1,0,0,0,63,10,
        1,0,0,0,64,66,5,48,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,
        67,69,5,48,0,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,86,7,
        0,0,0,71,73,5,48,0,0,72,71,1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,
        75,7,1,0,0,75,86,7,0,0,0,76,77,7,5,0,0,77,78,7,0,0,0,78,86,7,0,0,
        0,79,80,5,52,0,0,80,81,7,6,0,0,81,86,7,0,0,0,82,83,5,52,0,0,83,84,
        5,50,0,0,84,86,7,7,0,0,85,65,1,0,0,0,85,72,1,0,0,0,85,76,1,0,0,0,
        85,79,1,0,0,0,85,82,1,0,0,0,86,12,1,0,0,0,87,89,5,48,0,0,88,87,1,
        0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,92,5,48,0,0,91,90,1,0,0,0,91,
        92,1,0,0,0,92,93,1,0,0,0,93,109,7,0,0,0,94,96,5,48,0,0,95,94,1,0,
        0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,7,1,0,0,98,109,7,0,0,0,99,
        100,7,8,0,0,100,101,7,0,0,0,101,109,7,0,0,0,102,103,5,51,0,0,103,
        104,7,6,0,0,104,109,7,0,0,0,105,106,5,51,0,0,106,107,5,50,0,0,107,
        109,7,9,0,0,108,88,1,0,0,0,108,95,1,0,0,0,108,99,1,0,0,0,108,102,
        1,0,0,0,108,105,1,0,0,0,109,14,1,0,0,0,110,112,5,48,0,0,111,110,
        1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,115,5,48,0,0,114,113,
        1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,129,7,0,0,0,117,119,
        5,48,0,0,118,117,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,121,
        7,1,0,0,121,129,7,0,0,0,122,123,5,49,0,0,123,124,7,6,0,0,124,129,
        7,0,0,0,125,126,5,49,0,0,126,127,5,50,0,0,127,129,7,10,0,0,128,111,
        1,0,0,0,128,118,1,0,0,0,128,122,1,0,0,0,128,125,1,0,0,0,129,16,1,
        0,0,0,130,132,5,48,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,134,1,
        0,0,0,133,135,5,48,0,0,134,133,1,0,0,0,134,135,1,0,0,0,135,136,1,
        0,0,0,136,152,7,0,0,0,137,139,5,48,0,0,138,137,1,0,0,0,138,139,1,
        0,0,0,139,140,1,0,0,0,140,141,7,1,0,0,141,152,7,0,0,0,142,143,7,
        5,0,0,143,144,7,0,0,0,144,152,7,0,0,0,145,146,5,52,0,0,146,147,7,
        9,0,0,147,152,7,0,0,0,148,149,5,52,0,0,149,150,5,54,0,0,150,152,
        7,6,0,0,151,131,1,0,0,0,151,138,1,0,0,0,151,142,1,0,0,0,151,145,
        1,0,0,0,151,148,1,0,0,0,152,18,1,0,0,0,153,155,5,48,0,0,154,153,
        1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,158,5,48,0,0,157,156,
        1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,172,7,0,0,0,160,162,
        5,48,0,0,161,160,1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,164,
        7,1,0,0,164,172,7,0,0,0,165,166,5,49,0,0,166,167,7,0,0,0,167,172,
        7,0,0,0,168,169,5,50,0,0,169,170,5,48,0,0,170,172,5,48,0,0,171,154,
        1,0,0,0,171,161,1,0,0,0,171,165,1,0,0,0,171,168,1,0,0,0,172,20,1,
        0,0,0,25,0,42,45,49,62,65,68,72,85,88,91,95,108,111,114,118,128,
        131,134,138,151,154,157,161,171,0
    ]

class Q1Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    Number1 = 3
    Number2 = 4
    Max11 = 5
    Max12 = 6
    Max13 = 7
    Max21 = 8
    Max22 = 9
    Max23 = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'F1:'", "'F2:'" ]

    symbolicNames = [ "<INVALID>",
            "Number1", "Number2", "Max11", "Max12", "Max13", "Max21", "Max22", 
            "Max23" ]

    ruleNames = [ "T__0", "T__1", "Number1", "Number2", "Max11", "Max12", 
                  "Max13", "Max21", "Max22", "Max23" ]

    grammarFileName = "Q1.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


